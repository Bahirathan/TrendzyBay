#pragma checksum "I:\Company\MensClothe\PaymentOrder.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "6085DBC249295309C97F52D05396D7560A5E4D42"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASP {
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using System.Web.WebPages.Html;
    using WebMatrix.Data;
    using WebMatrix.WebData;
    using Microsoft.Web.WebPages.OAuth;
    using DotNetOpenAuth.AspNet;
    
    
    public class _Page_PaymentOrder_cshtml : System.Web.WebPages.WebPage {
        
#line hidden
        
        public _Page_PaymentOrder_cshtml() {
        }
        
        protected ASP.global_asax ApplicationInstance {
            get {
                return ((ASP.global_asax)(Context.ApplicationInstance));
            }
        }
        
        public override void Execute() {
DefineSection("Scripts", () => {

WriteLiteral("\r\n\r\n    <script");

WriteAttribute("src", Tuple.Create(" src=\"", 33), Tuple.Create("\"", 71)
, Tuple.Create(Tuple.Create("", 39), Tuple.Create<System.Object, System.Int32>(Href("~/Scripts/jquery.validate.min.js")
, 39), false)
);

WriteLiteral("></script>\r\n    <script");

WriteAttribute("src", Tuple.Create(" src=\"", 95), Tuple.Create("\"", 145)
, Tuple.Create(Tuple.Create("", 101), Tuple.Create<System.Object, System.Int32>(Href("~/Scripts/jquery.validate.unobtrusive.min.js")
, 101), false)
);

WriteLiteral("></script>\r\n    <script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(@">

        $(document).ready(function () {

        });

        function SelectedItemClick(obj) {
            popupwin = window.open('DetailClotheResult' + ""?resultIndex="" + obj.id + ""&isPopup=1"", 'Detail', 'height=' + 600 + ',width=' + 520 + ',scrollbars=yes,left=400,top=300');
            popupwin.focus();
        }


        function selecpayment(obj) {

            var ddlValue = $(""#paymentType"").val();

            if (ddlValue == ""DY"") {
                $(""#Ondelivery"").css('display', '');
                $(""#payByCC"").css('display', 'none');
            }
            else if (ddlValue == ""PP"") {
                $(""#Ondelivery"").css('display', 'none');
                $(""#payByCC"").css('display', '');

            }
            else if (ddlValue == ""CC"") {
                $(""#payByCC"").css('display', '');
                $(""#Ondelivery"").css('display', 'none');
            }
        }

        function btnSubmit_Click(CustomerDetails, carddetails, amount, PayPalReturnRequest) {
            debugger;

            $.ajax({
                type: ""POST"",
                url: """);

            
            #line 41 "I:\Company\MensClothe\PaymentOrder.cshtml"
                 Write(MensClothe.AspControlUtil.getAppPath());

            
            #line default
            #line hidden
WriteLiteral(@"Web_Service/WebService.asmx/ProcessPayment"",
                contentType: ""application/json; charset=utf-8"",
                data: ""{cus:'"" + CustomerDetails + ""',ccard:'"" + carddetails + ""',Amount:'"" + amount + ""',PayPalReturnRequest:'"" + PayPalReturnRequest + ""'}"",
                success: OnSucceess,
                error: OnError
            })
        }

        function OnSucceess() {
            alert(""success"");
        }

        function OnError(error) {
        }

    </script>
");

});

WriteLiteral("\r\n");

            
            #line 59 "I:\Company\MensClothe\PaymentOrder.cshtml"
  
    Page.Title = "Order Form";
    Layout = "~/_SiteLayout.cshtml";

    ProfileCommon profile = HttpContext.Current.Profile as ProfileCommon;
    var CartItems = profile.SCart.Items;
    string  amount = profile.SCart.Total.ToString();
    var CustomerDetails = new DAL.Customer();
    var carddetails = new CCard();
    bool PayPalReturnRequest = false;
    DateTime deliverydate;
    decimal deliveryCharge = 0;
    decimal discount = 0.000M;
    var paymentType = "";
    
    if (IsPost)
    {
        paymentType = Request.Form["paymentType"].ToString();

        if (paymentType == "PP" || paymentType == "CC")
        {
            // validate();
            // Setup validation
            Validation.RequireField("txtName", "Enter your Name.");
            Validation.Add("txtName",
                Validator.StringLength(
                    maxLength: Int32.MaxValue,
                    minLength: 2,
                    errorMessage: "Name Cannot be empty"));

            Validation.RequireField("txtCity", "Enter city Name.");
            Validation.Add("txtCity",
                Validator.StringLength(
                    maxLength: Int32.MaxValue,
                    minLength: 6,
                    errorMessage: "City name cannot empty."));

            Validation.RequireField("txtCC", "Enter card number.");
            Validation.Add("txtCC",
                Validator.StringLength(
                    maxLength: 16,
                    minLength: 16,
                    errorMessage: "Credit Card number must be 16 characters ."));


            Validation.RequireField("txtState", "Enter state.");
            Validation.Add("txtState",
                Validator.StringLength(
                    maxLength: Int32.MaxValue,
                    minLength: 6,
                    errorMessage: "Province name cannot empty."));

            Validation.RequireField("txtAddress", "Enter your Address");
            Validation.Add("txtAddress",
                Validator.StringLength(
                    maxLength: Int32.MaxValue,
                    minLength: 6,
                    errorMessage: "Enter detail address"));

            Validation.RequireField("txtEmail", "Enter Email Address");
            Validation.Add("txtEmail",
              Validator.Regex(@"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$",
              "Invalid format for an email address"));

            Validation.RequireField("txtPhone", "Enter Phone Number");
            Validation.Add("txtPhone",
            Validator.StringLength(maxLength: Int32.MaxValue,
                    minLength: 10, errorMessage: "Must be between 10 and 20"));

            //Validation.RequireField("txtSecurity", "Enter Security code");
            Validation.Add("txtSecurity",
                Validator.Required("Must be three numbers"));


        }
        else
        {

            // validate();
            // Setup validation
            Validation.RequireField("CustomerName", "Enter your Name.");
            Validation.Add("CustomerName",
                Validator.StringLength(
                    maxLength: Int32.MaxValue,
                    minLength: 2,
                    errorMessage: "CustomerName Cannot be empty"));

            Validation.RequireField("Address", "Enter your Address");
            Validation.Add("Address",
                Validator.StringLength(
                    maxLength: Int32.MaxValue,
                    minLength: 6,
                    errorMessage: "Enter detail address"));

            Validation.RequireField("Email", "Enter Email Address");
            Validation.Add("Email",
              Validator.Regex(@"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$",
              "Invalid format for an email address"));

            Validation.RequireField("Phone", "Enter Phone Number");
            Validation.Add("Phone",
            Validator.StringLength(maxLength: Int32.MaxValue,
                    minLength: 10, errorMessage: "Must be between 10 and 20"));

        }


     //   amount = Request.Form["txtOrderAmount"].ToString();
        OrderClass order = new OrderClass();
        DAL.DbConnection dbCon = new DAL.DbConnection("ConnectionStr");
        if (Validation.IsValid())
        {
            AntiForgery.Validate();
            if (paymentType == "CC" || paymentType == "PP")
            {
                CustomerDetails = new DAL.Customer
                {
                    customername = Request.Form["txtName"].ToString(),
                    Address = Request.Form["txtAddress"].ToString(),
                    City = Request.Form["txtCity"].ToString(),
                    Country = Request.Form["txtCountryId"].ToString(),
                    Email = Request.Form["txtEmail"].ToString(),
                    phone = Request.Form["txtPhone"].ToString(),
                    State = Request.Form["txtState"].ToString(),
                    Zipcode = Request.Form["txtZip"].ToString(),
                    CustomerID = string.Empty,

                };

                carddetails = new CCard
                {
                    CreditCardExpiration = Request.Form["txtCCMonth"].ToString() + "/" + Request.Form["txtCCYear"].ToString(),
                    CreditCardNumber = Request.Form["txtCC"].ToString(),
                    SecurityCode = Request.Form["txtSecurity"].ToString(),
                    CardType = Request.Form["paymentType"].ToString()
                };


            }
            else
            {
                CustomerDetails = new DAL.Customer
                {
                    customername = Request.Form["CustomerName"].ToString(),
                    Address = Request.Form["Address"].ToString(),
                    City = string.Empty,
                    Country = "LK",
                    Email = Request.Form["Email"].ToString(),
                    phone = Request.Form["Phone"].ToString(),
                    State = string.Empty,
                    Zipcode = string.Empty,
                    CustomerID = string.Empty,

                };

            }
            deliverydate = DateTime.Now.AddDays(2);
            int ordID = dbCon.updateCustomerOrder(CustomerDetails, deliverydate, deliveryCharge, amount);
          
            
            foreach (var item in CartItems)
            {
                
                
                dbCon.updateOrderDetails(ordID, item.ProductID, Convert.ToDecimal(item.Price), item.Quantity, discount);
            }

            if (paymentType == "CC" || paymentType == "PP")
            {
                //  int i =DAL.Customer.insert(CustomerDetails);    

                if (Request.QueryString["PayPal"] != null)
                {
                    // order.HandlePayPalReturn();
                    string Result = HttpContext.Current.Request.QueryString["PayPal"];
                    string Redir = (string)HttpContext.Current.Session["PayPal_Redirected"];
                    // *** Only do this if we are redirected!
                    if (Redir == "True")
                    {
                        HttpContext.Current.Session.Remove("PayPal_Redirected");

                        // *** Set flag so we know not to go TO PayPal again
                        PayPalReturnRequest = true;
                        Request.Form["txtOrderAmount"] = ((decimal)HttpContext.Current.Session["PayPal_OrderAmount"]).ToString();
                        Request.Form["paymentType"] = "PP";

                        if (Result == "Cancel")
                        {
                            Response.Write("<script>alert('PayPal Payment Processing Failed');</script>");
                        }
                        else
                        {
                            // *** We returned successfully - simulate button click to save the order
                            string script = "btnSubmit_Click();";
                            ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "Alert", script, true);

                        }
                    }
                }
                else
                {



                    decimal OrderAmount;

                    // *** Our simplistic 'order validation'
                    OrderAmount = decimal.Parse(amount);

                    // *** Dumb ass data simulation - this should only be set once the order is Validated!
                    this.Session["OrderAmount"] = OrderAmount;

                    // *** Handle PayPal Processing seperately from ProcessCard() since it requires
                    // *** passing off to another page on the PayPal Site.
                    // *** This request will return to this page Cancel or Success querystring
                    if (carddetails.CardType == "PP" && !PayPalReturnRequest)
                    {
                        order.HandlePayPalRedirection(); // this will end this request!
                    }
                    else
                    {
                        // *** CC Processing
                        if (!order.ProcessCreditCard(CustomerDetails, carddetails, amount))
                        {
                            // if there is an error in processing the CC card catch the error and redirect to error page 
                            string url = "~/ErrorPage?ErrorMessage=" + order.lblErrorMessage;
                            Response.Redirect(url);

                            // Response.Write("<script>alert('Credit Card processing failed try later...');</script>");
                            //  return;    // failure - display error
                            // *** Write the order amount (and enything else you might need into session)
                            // *** Normally you'd probably write a PK for the final invoice so you 
                            // *** can reload it on the Confirmation.aspx page
                            Session["PayPal_OrderAmount"] = OrderAmount;
                        }
                    }
                    // *** TODO:  Save the  order to Transaction table for further use
                    // *** Show the confirmation page - don't transfer so they can refresh without error
                    HttpContext.Current.Response.Redirect("~/ConfirmationPage");

                }

            }
            else
            {
             HttpContext.Current.Response.Redirect("~/ConfirmationPage?Oid=" + ordID);
            }

        }
    }



            
            #line default
            #line hidden
WriteLiteral("\r\n\r\n\r\n\r\n\r\n\r\n<section>\r\n    <form");

WriteLiteral(" id=\"frmOrderForm\"");

WriteLiteral(" method=\"post\"");

WriteLiteral(">\r\n");

WriteLiteral("        ");

            
            #line 319 "I:\Company\MensClothe\PaymentOrder.cshtml"
   Write(AntiForgery.GetHtml());

            
            #line default
            #line hidden
WriteLiteral("\r\n");

WriteLiteral("        ");

            
            #line 320 "I:\Company\MensClothe\PaymentOrder.cshtml"
   Write(Html.ValidationSummary("Please correct the errors and try again.", excludeFieldErrors: true, htmlAttributes: null));

            
            #line default
            #line hidden
WriteLiteral(@"
        <fieldset>
            <legend>Shopping Cart Details</legend>
            <br />


            <table>
                <tr>
                    <td>
                        <label>
                            <b>Price</b></label>
                    </td>

                    <td>
                        <label");

WriteLiteral(" for=\"ItemImage\"");

WriteLiteral(">\r\n                            <b>Quantity</b>\r\n                        </label>\r" +
"\n\r\n                    </td>\r\n\r\n                    <td>\r\n                      " +
"  <label");

WriteLiteral(" for=\"ItemImage\"");

WriteLiteral(@">
                            <b>Image</b>
                        </label>
                    </td>


                    <td>
                        <label>
                            <b>Description</b></label>
                    </td>

                    <td>
                        <label>
                            <b>SubTotal</b></label>
                    </td>

                </tr>


");

            
            #line 360 "I:\Company\MensClothe\PaymentOrder.cshtml"
                
            
            #line default
            #line hidden
            
            #line 360 "I:\Company\MensClothe\PaymentOrder.cshtml"
                 foreach (var item in CartItems)
                { 

            
            #line default
            #line hidden
WriteLiteral("                    <tr>\r\n                        <td>\r\n                         " +
"   <label");

WriteLiteral(" id=\"Price\"");

WriteLiteral(">");

            
            #line 364 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                         Write(item.Price);

            
            #line default
            #line hidden
WriteLiteral(" </label>\r\n                        </td>\r\n                        <td>\r\n\r\n       " +
"                     <label");

WriteLiteral(" id=\"quantity\"");

WriteLiteral(">");

            
            #line 368 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                            Write(item.Quantity);

            
            #line default
            #line hidden
WriteLiteral(" </label>\r\n                        </td>\r\n                        <td>\r\n         " +
"                   <img");

WriteAttribute("src", Tuple.Create(" src=\"", 14213), Tuple.Create("\"", 14295)
            
            #line 371 "I:\Company\MensClothe\PaymentOrder.cshtml"
, Tuple.Create(Tuple.Create("", 14219), Tuple.Create<System.Object, System.Int32>(MensClothe.AspControlUtil.getFullImagePath(Convert.ToString(item.ImageUrl))
            
            #line default
            #line hidden
, 14219), false)
);

WriteLiteral(" alt=\"Red dot\"");

WriteLiteral(" width=\"100\"");

WriteLiteral(" height=\"150\"");

WriteLiteral(">\r\n                            ");

WriteLiteral("\r\n                        </td>\r\n                        <td>\r\n                  " +
"          <label");

WriteLiteral(" id=\"Description\"");

WriteLiteral(">");

            
            #line 376 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                               Write(item.ProductName);

            
            #line default
            #line hidden
WriteLiteral("</label>\r\n                        </td>\r\n\r\n                        <td>\r\n        " +
"                    <label");

WriteLiteral(" id=\"SubTotal\"");

WriteLiteral(">");

            
            #line 380 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                            Write(item.SubTotal);

            
            #line default
            #line hidden
WriteLiteral("</label>\r\n                        </td>\r\n\r\n\r\n\r\n                    </tr>\r\n");

            
            #line 386 "I:\Company\MensClothe\PaymentOrder.cshtml"
                }

            
            #line default
            #line hidden
WriteLiteral("            </table>\r\n\r\n        </fieldset>\r\n        <fieldset>\r\n            <leg" +
"end>Fill in your Payment details</legend>\r\n            <ol>\r\n\r\n                <" +
"li");

WriteLiteral(" class=\"Clothes\"");

WriteLiteral(">\r\n\r\n                    <label");

WriteLiteral(" for=\"paymentType\"");

WriteLiteral(" \'");

            
            #line 396 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                               if (!ModelState.IsValidField("paymentType"))
                                              {

            
            #line default
            #line hidden
WriteLiteral("                        ");

WriteLiteral("class=\"error-label\"");

            
            #line 398 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                                        }
            
            #line default
            #line hidden
WriteLiteral("\'>\r\n                        Select Payment Type :\r\n                    </label>\r\n" +
"                </li>\r\n                <li>\r\n                    <select");

WriteLiteral(" id=\"paymentType\"");

WriteLiteral(" name=\"paymentType\"");

WriteLiteral(" onchange=\"selecpayment(this);\"");

WriteLiteral(">\r\n                        <option");

WriteLiteral(" value=\"\"");

WriteLiteral(">Select Payment type</option>\r\n                        <option");

WriteLiteral(" value=\"DY\"");

WriteLiteral(">On delivery</option>\r\n                        <option");

WriteLiteral(" value=\"PP\"");

WriteLiteral(">PayPal</option>\r\n                        <option");

WriteLiteral(" value=\"CC\"");

WriteLiteral(">Credit Card</option>\r\n                    </select>\r\n");

WriteLiteral("                    ");

            
            #line 409 "I:\Company\MensClothe\PaymentOrder.cshtml"
               Write(Html.ValidationMessage("paymentType"));

            
            #line default
            #line hidden
WriteLiteral("\r\n                </li>\r\n            </ol>\r\n\r\n            <div");

WriteLiteral(" id=\"Ondelivery\"");

WriteLiteral(" style=\"display: none\"");

WriteLiteral(">\r\n                <ol>\r\n                    <li>\r\n                        <label" +
"");

WriteLiteral(" for=\"CustomerName\"");

WriteLiteral(" \'");

            
            #line 416 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                                    if (!ModelState.IsValidField("CustomerName"))
                                                   {

            
            #line default
            #line hidden
WriteLiteral("                        ");

WriteLiteral("class=\"error-label\"");

            
            #line 418 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                                        }
            
            #line default
            #line hidden
WriteLiteral("\'>\r\n                            Name:\r\n                        </label>\r\n        " +
"            </li>\r\n                    <li>\r\n                        <input");

WriteLiteral(" type=\"text\"");

WriteLiteral(" id=\"CustomerName\"");

WriteLiteral(" name=\"CustomerName\"");

WriteLiteral("  \'");

            
            #line 423 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                                                              Write(Validation.For("CustomerName"));

            
            #line default
            #line hidden
WriteLiteral("\' />\r\n");

WriteLiteral("                        ");

            
            #line 424 "I:\Company\MensClothe\PaymentOrder.cshtml"
                   Write(Html.ValidationMessage("CustomerName"));

            
            #line default
            #line hidden
WriteLiteral("\r\n                    </li>\r\n                </ol>\r\n\r\n                <ol>\r\n     " +
"               <li>\r\n                        <label");

WriteLiteral(" for=\"Address\"");

WriteLiteral(" \'");

            
            #line 430 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                               if (!ModelState.IsValidField("Address"))
                                              {

            
            #line default
            #line hidden
WriteLiteral("                        ");

WriteLiteral("class=\"error-label\"");

            
            #line 432 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                                        }
            
            #line default
            #line hidden
WriteLiteral("\'>\r\n                            Address: [ One day Delivery in Colombo 1-15 ]\r\n  " +
"                      </label>\r\n                    </li>\r\n                    <" +
"li>\r\n                        <input");

WriteLiteral(" type=\"text\"");

WriteLiteral(" id=\"Address\"");

WriteLiteral(" name=\"Address\"");

WriteLiteral("  \'");

            
            #line 437 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                                                    Write(Validation.For("Address"));

            
            #line default
            #line hidden
WriteLiteral("\'   />\r\n");

WriteLiteral("                        ");

            
            #line 438 "I:\Company\MensClothe\PaymentOrder.cshtml"
                   Write(Html.ValidationMessage("Address"));

            
            #line default
            #line hidden
WriteLiteral("\r\n                    </li>\r\n                </ol>\r\n\r\n\r\n                <ol>\r\n\r\n " +
"                   <li>\r\n                        <label");

WriteLiteral(" for=\"Email\"");

WriteLiteral(" \'");

            
            #line 446 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                             if (!ModelState.IsValidField("Email"))
                                            {

            
            #line default
            #line hidden
WriteLiteral("                        ");

WriteLiteral("class=\"error-label\"");

            
            #line 448 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                                        }
            
            #line default
            #line hidden
WriteLiteral("\'>\r\n                            Email:\r\n                        </label>\r\n       " +
"             </li>\r\n                    <li>\r\n                        <input");

WriteLiteral(" type=\"text\"");

WriteLiteral(" id=\"Email\"");

WriteLiteral(" name=\"Email\"");

WriteLiteral(" \'");

            
            #line 453 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                                               Write(Validation.For("Email"));

            
            #line default
            #line hidden
WriteLiteral("\' />\r\n");

WriteLiteral("                        ");

            
            #line 454 "I:\Company\MensClothe\PaymentOrder.cshtml"
                   Write(Html.ValidationMessage("Email"));

            
            #line default
            #line hidden
WriteLiteral("\r\n                    </li>\r\n                </ol>\r\n\r\n                <ol>\r\n     " +
"               <li>\r\n                        <label");

WriteLiteral(" for=\"Phone\"");

WriteLiteral(" \'");

            
            #line 460 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                             if (!ModelState.IsValidField("Phone"))
                                            {

            
            #line default
            #line hidden
WriteLiteral("                        ");

WriteLiteral("class=\"error-label\"");

            
            #line 462 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                                        }
            
            #line default
            #line hidden
WriteLiteral("\'>\r\n                            Phone:\r\n                        </label>\r\n       " +
"             </li>\r\n                    <li>\r\n                        <input");

WriteLiteral(" type=\"text\"");

WriteLiteral(" id=\"Phone\"");

WriteLiteral(" name=\"Phone\"");

WriteLiteral(" \'");

            
            #line 467 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                                               Write(Validation.For("Phone"));

            
            #line default
            #line hidden
WriteLiteral("\' />\r\n");

WriteLiteral("                        ");

            
            #line 468 "I:\Company\MensClothe\PaymentOrder.cshtml"
                   Write(Html.ValidationMessage("txtPhone"));

            
            #line default
            #line hidden
WriteLiteral("\r\n                    </li>\r\n                </ol>\r\n\r\n            </div>\r\n\r\n\r\n   " +
"         <div");

WriteLiteral(" id=\"payByCC\"");

WriteLiteral(" style=\"display: none\"");

WriteLiteral(">\r\n                <ol>\r\n                    <li>\r\n                        <label" +
"");

WriteLiteral(" for=\"txtName\"");

WriteLiteral(" \'");

            
            #line 478 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                               if (!ModelState.IsValidField("txtName"))
                                              {

            
            #line default
            #line hidden
WriteLiteral("                        ");

WriteLiteral("class=\"error-label\"");

            
            #line 480 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                                        }
            
            #line default
            #line hidden
WriteLiteral("\'>\r\n                            Name:\r\n                        </label>\r\n        " +
"            </li>\r\n                    <li>\r\n                        <input");

WriteLiteral(" type=\"text\"");

WriteLiteral(" id=\"txtName\"");

WriteLiteral(" name=\"txtName\"");

WriteLiteral("  \'");

            
            #line 485 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                                                    Write(Validation.For("txtName"));

            
            #line default
            #line hidden
WriteLiteral("\' />\r\n");

WriteLiteral("                        ");

            
            #line 486 "I:\Company\MensClothe\PaymentOrder.cshtml"
                   Write(Html.ValidationMessage("txtName"));

            
            #line default
            #line hidden
WriteLiteral("\r\n                    </li>\r\n                </ol>\r\n\r\n                <ol>\r\n     " +
"               <li>\r\n                        <label");

WriteLiteral(" for=\"txtAddress\"");

WriteLiteral(" \'");

            
            #line 492 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                                  if (!ModelState.IsValidField("txtAddress"))
                                                 {

            
            #line default
            #line hidden
WriteLiteral("                        ");

WriteLiteral("class=\"error-label\"");

            
            #line 494 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                                        }
            
            #line default
            #line hidden
WriteLiteral("\'>\r\n                            Address:\r\n                        </label>\r\n     " +
"               </li>\r\n                    <li>\r\n                        <input");

WriteLiteral(" type=\"text\"");

WriteLiteral(" id=\"txtAddress\"");

WriteLiteral(" name=\"txtAddress\"");

WriteLiteral("  \'");

            
            #line 499 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                                                          Write(Validation.For("txtAddress"));

            
            #line default
            #line hidden
WriteLiteral("\'   />\r\n");

WriteLiteral("                        ");

            
            #line 500 "I:\Company\MensClothe\PaymentOrder.cshtml"
                   Write(Html.ValidationMessage("txtAddress"));

            
            #line default
            #line hidden
WriteLiteral("\r\n                    </li>\r\n                </ol>\r\n                <ol>\r\n       " +
"             <li>\r\n                        <label");

WriteLiteral(" for=\"txtCity\"");

WriteLiteral(" \'");

            
            #line 505 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                               if (!ModelState.IsValidField("txtCity"))
                                              {

            
            #line default
            #line hidden
WriteLiteral("                        ");

WriteLiteral("class=\"error-label\"");

            
            #line 507 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                                        }
            
            #line default
            #line hidden
WriteLiteral("\'>\r\n                            City:\r\n                        </label>\r\n        " +
"            </li>\r\n                    <li>\r\n                        <input");

WriteLiteral(" type=\"text\"");

WriteLiteral(" id=\"txtCity\"");

WriteLiteral(" name=\"txtCity\"");

WriteLiteral("  \'");

            
            #line 512 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                                                    Write(Validation.For("txtCity"));

            
            #line default
            #line hidden
WriteLiteral("\' />\r\n");

WriteLiteral("                        ");

            
            #line 513 "I:\Company\MensClothe\PaymentOrder.cshtml"
                   Write(Html.ValidationMessage("txtCity"));

            
            #line default
            #line hidden
WriteLiteral("\r\n                    </li>\r\n                </ol>\r\n                <ol>\r\n\r\n     " +
"               <li>\r\n                        <label");

WriteLiteral(" for=\"txtZip\"");

WriteLiteral(" \'");

            
            #line 519 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                              if (!ModelState.IsValidField("txtState"))
                                             {

            
            #line default
            #line hidden
WriteLiteral("                        ");

WriteLiteral("class=\"error-label\"");

            
            #line 521 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                                        }
            
            #line default
            #line hidden
WriteLiteral("\'>\r\n                            State/Province:\r\n                        </label>" +
"\r\n                    </li>\r\n                    <li>\r\n                        <" +
"input");

WriteLiteral(" type=\"text\"");

WriteLiteral(" id=\"txtState\"");

WriteLiteral(" name=\"txtState\"");

WriteLiteral("  \'");

            
            #line 526 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                                                      Write(Validation.For("txtState"));

            
            #line default
            #line hidden
WriteLiteral("\' />\r\n");

WriteLiteral("                        ");

            
            #line 527 "I:\Company\MensClothe\PaymentOrder.cshtml"
                   Write(Html.ValidationMessage("txtState"));

            
            #line default
            #line hidden
WriteLiteral("\r\n                        &nbsp;&nbsp; \r\n                                    <lab" +
"el");

WriteLiteral(" for=\"ZipCode\"");

WriteLiteral(" \'");

            
            #line 529 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                                           if (!ModelState.IsValidField("txtZip"))
                                                          {

            
            #line default
            #line hidden
WriteLiteral("                                        ");

WriteLiteral("class=\"error-label\"");

            
            #line 531 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                                                        }
            
            #line default
            #line hidden
WriteLiteral("\'>\r\n                                        Zip/Postal Code:\r\n                   " +
"                 </label>\r\n\r\n                        <input");

WriteLiteral(" type=\"text\"");

WriteLiteral(" id=\"txtZip\"");

WriteLiteral(" name=\"txtZip\"");

WriteLiteral("  \'");

            
            #line 535 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                                                  Write(Validation.For("txtZip"));

            
            #line default
            #line hidden
WriteLiteral("\' />\r\n");

WriteLiteral("                        ");

            
            #line 536 "I:\Company\MensClothe\PaymentOrder.cshtml"
                   Write(Html.ValidationMessage("txtZip"));

            
            #line default
            #line hidden
WriteLiteral("\r\n                    </li>\r\n                </ol>\r\n                <ol>\r\n\r\n     " +
"               <li>\r\n                        <label>Country:</label>\r\n          " +
"          </li>\r\n                    <li>\r\n                        <select");

WriteLiteral(" id=\"txtCountryId\"");

WriteLiteral(" name=\"txtCountryId\"");

WriteLiteral(">\r\n                            <option");

WriteLiteral(" value=\"LK\"");

WriteLiteral(" selected=\"selected\"");

WriteLiteral(">Sri Lanka</option>\r\n                            <option");

WriteLiteral(" value=\"AL\"");

WriteLiteral(">Albania</option>\r\n                            <option");

WriteLiteral(" value=\"AR\"");

WriteLiteral(">Argentina</option>\r\n                            <option");

WriteLiteral(" value=\"AM\"");

WriteLiteral(">Armenia</option>\r\n                            <option");

WriteLiteral(" value=\"AU\"");

WriteLiteral(">Australia</option>\r\n                            <option");

WriteLiteral(" value=\"AT\"");

WriteLiteral(">Austria</option>\r\n                            <option");

WriteLiteral(" value=\"BE\"");

WriteLiteral(">Belgium</option>\r\n                            <option");

WriteLiteral(" value=\"BO\"");

WriteLiteral(">Bolivia</option>\r\n                            <option");

WriteLiteral(" value=\"BR\"");

WriteLiteral(">Brazil</option>\r\n                            <option");

WriteLiteral(" value=\"BG\"");

WriteLiteral(">Bulgaria</option>\r\n                            <option");

WriteLiteral(" value=\"KH\"");

WriteLiteral(">Cambodia</option>\r\n                            <option");

WriteLiteral(" value=\"CA\"");

WriteLiteral(">Canada</option>\r\n                            <option");

WriteLiteral(" value=\"CL\"");

WriteLiteral(">Chile</option>\r\n                            <option");

WriteLiteral(" value=\"CN\"");

WriteLiteral(">China</option>\r\n                            <option");

WriteLiteral(" value=\"CO\"");

WriteLiteral(">Colombia</option>\r\n                            <option");

WriteLiteral(" value=\"CR\"");

WriteLiteral(">Costa Rica</option>\r\n                            <option");

WriteLiteral(" value=\"CU\"");

WriteLiteral(">Cuba</option>\r\n                            <option");

WriteLiteral(" value=\"CZ\"");

WriteLiteral(">Czech Republic</option>\r\n                            <option");

WriteLiteral(" value=\"DK\"");

WriteLiteral(">Denmark</option>\r\n                            <option");

WriteLiteral(" value=\"EC\"");

WriteLiteral(">Ecuador</option>\r\n                            <option");

WriteLiteral(" value=\"EG\"");

WriteLiteral(">Egypt</option>\r\n                            <option");

WriteLiteral(" value=\"EE\"");

WriteLiteral(">Estonia</option>\r\n                            <option");

WriteLiteral(" value=\"ET\"");

WriteLiteral(">Ethiopia</option>\r\n                            <option");

WriteLiteral(" value=\"FI\"");

WriteLiteral(">Finland</option>\r\n                            <option");

WriteLiteral(" value=\"FR\"");

WriteLiteral(">France</option>\r\n                            <option");

WriteLiteral(" value=\"DE\"");

WriteLiteral(">Germany</option>\r\n                            <option");

WriteLiteral(" value=\"GR\"");

WriteLiteral(">Greece</option>\r\n                            <option");

WriteLiteral(" value=\"GL\"");

WriteLiteral(">Greenland</option>\r\n                            <option");

WriteLiteral(" value=\"GD\"");

WriteLiteral(">Grenada</option>\r\n                            <option");

WriteLiteral(" value=\"GU\"");

WriteLiteral(">Guam</option>\r\n                            <option");

WriteLiteral(" value=\"GT\"");

WriteLiteral(">Guatemala</option>\r\n                            <option");

WriteLiteral(" value=\"HT\"");

WriteLiteral(">Haiti</option>\r\n                            <option");

WriteLiteral(" value=\"HN\"");

WriteLiteral(">Honduras</option>\r\n                            <option");

WriteLiteral(" value=\"HK\"");

WriteLiteral(">Hong Kong</option>\r\n                            <option");

WriteLiteral(" value=\"HU\"");

WriteLiteral(">Hungary</option>\r\n                            <option");

WriteLiteral(" value=\"IS\"");

WriteLiteral(">Iceland</option>\r\n                            <option");

WriteLiteral(" value=\"IN\"");

WriteLiteral(">India</option>\r\n                            <option");

WriteLiteral(" value=\"ID\"");

WriteLiteral(">Indonesia</option>\r\n                            <option");

WriteLiteral(" value=\"IE\"");

WriteLiteral(">Ireland</option>\r\n                            <option");

WriteLiteral(" value=\"IL\"");

WriteLiteral(">Israel</option>\r\n                            <option");

WriteLiteral(" value=\"IT\"");

WriteLiteral(">Italy</option>\r\n                            <option");

WriteLiteral(" value=\"JM\"");

WriteLiteral(">Jamaica</option>\r\n                            <option");

WriteLiteral(" value=\"JP\"");

WriteLiteral(">Japan</option>\r\n                            <option");

WriteLiteral(" value=\"LB\"");

WriteLiteral(">Lebanon</option>\r\n                            <option");

WriteLiteral(" value=\"LI\"");

WriteLiteral(">Liechtenstein</option>\r\n                            <option");

WriteLiteral(" value=\"LU\"");

WriteLiteral(">Luxembourg</option>\r\n                            <option");

WriteLiteral(" value=\"MG\"");

WriteLiteral(">Madagascar</option>\r\n                            <option");

WriteLiteral(" value=\"MY\"");

WriteLiteral(">Malaysia</option>\r\n                            <option");

WriteLiteral(" value=\"MX\"");

WriteLiteral(">Mexico</option>\r\n                            <option");

WriteLiteral(" value=\"MC\"");

WriteLiteral(">Monaco</option>\r\n                            <option");

WriteLiteral(" value=\"MA\"");

WriteLiteral(">Morocco</option>\r\n                            <option");

WriteLiteral(" value=\"NL\"");

WriteLiteral(">Netherlands</option>\r\n                            <option");

WriteLiteral(" value=\"NZ\"");

WriteLiteral(">New Zealand</option>\r\n                            <option");

WriteLiteral(" value=\"NI\"");

WriteLiteral(">Nicaragua</option>\r\n                            <option");

WriteLiteral(" value=\"KP\"");

WriteLiteral(">North Korea</option>\r\n                            <option");

WriteLiteral(" value=\"NO\"");

WriteLiteral(">Norway</option>\r\n                            <option");

WriteLiteral(" value=\"PK\"");

WriteLiteral(">Pakistan</option>\r\n                            <option");

WriteLiteral(" value=\"PA\"");

WriteLiteral(">Panama</option>\r\n                            <option");

WriteLiteral(" value=\"PE\"");

WriteLiteral(">Peru</option>\r\n                            <option");

WriteLiteral(" value=\"PH\"");

WriteLiteral(">Philippines</option>\r\n                            <option");

WriteLiteral(" value=\"PL\"");

WriteLiteral(">Poland</option>\r\n                            <option");

WriteLiteral(" value=\"PT\"");

WriteLiteral(">Portugal</option>\r\n                            <option");

WriteLiteral(" value=\"PR\"");

WriteLiteral(">Puerto Rico</option>\r\n                            <option");

WriteLiteral(" value=\"RO\"");

WriteLiteral(">Romania</option>\r\n                            <option");

WriteLiteral(" value=\"RU\"");

WriteLiteral(">Russian Federation</option>\r\n                            <option");

WriteLiteral(" value=\"SA\"");

WriteLiteral(">Saudi Arabia</option>\r\n                            <option");

WriteLiteral(" value=\"SG\"");

WriteLiteral(">Singapore</option>\r\n                            <option");

WriteLiteral(" value=\"ZA\"");

WriteLiteral(">South Africa</option>\r\n                            <option");

WriteLiteral(" value=\"KR\"");

WriteLiteral(">South Korea</option>\r\n                            <option");

WriteLiteral(" value=\"ES\"");

WriteLiteral(">Spain</option>\r\n                            <option");

WriteLiteral(" value=\"SE\"");

WriteLiteral(">Sweden</option>\r\n                            <option");

WriteLiteral(" value=\"CH\"");

WriteLiteral(">Switzerland</option>\r\n                            <option");

WriteLiteral(" value=\"TW\"");

WriteLiteral(">Taiwan</option>\r\n                            <option");

WriteLiteral(" value=\"TH\"");

WriteLiteral(">Thailand</option>\r\n                            <option");

WriteLiteral(" value=\"TR\"");

WriteLiteral(">Turkey</option>\r\n                            <option");

WriteLiteral(" value=\"UA\"");

WriteLiteral(">Ukraine</option>\r\n                            <option");

WriteLiteral(" value=\"AE\"");

WriteLiteral(">United Arab Emirates</option>\r\n                            <option");

WriteLiteral(" value=\"GB\"");

WriteLiteral(">United Kingdom</option>\r\n                            <option");

WriteLiteral(" value=\"US\"");

WriteLiteral(">United States</option>\r\n                            <option");

WriteLiteral(" value=\"VE\"");

WriteLiteral(">Venezuela</option>\r\n                            <option");

WriteLiteral(" value=\"VN\"");

WriteLiteral(">Vietnam</option>\r\n                            <option");

WriteLiteral(" value=\"VG\"");

WriteLiteral(">Virgin Islands (British)</option>\r\n                            <option");

WriteLiteral(" value=\"VI\"");

WriteLiteral(">Virgin Islands (U.S.)</option>\r\n                            <option");

WriteLiteral(" value=\"ZZ\"");

WriteLiteral(">Other-Not Shown</option>\r\n\r\n                        </select>\r\n                 " +
"   </li>\r\n                </ol>\r\n                <ol>\r\n\r\n                    <li" +
">\r\n                        <label");

WriteLiteral(" for=\"txtEmail\"");

WriteLiteral(" \'");

            
            #line 637 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                                if (!ModelState.IsValidField("txtEmail"))
                                               {

            
            #line default
            #line hidden
WriteLiteral("                        ");

WriteLiteral("class=\"error-label\"");

            
            #line 639 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                                        }
            
            #line default
            #line hidden
WriteLiteral("\'>\r\n                            Email:\r\n                        </label>\r\n       " +
"             </li>\r\n                    <li>\r\n                        <input");

WriteLiteral(" type=\"text\"");

WriteLiteral(" id=\"txtEmail\"");

WriteLiteral(" name=\"txtEmail\"");

WriteLiteral(" \'");

            
            #line 644 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                                                     Write(Validation.For("txtEmail"));

            
            #line default
            #line hidden
WriteLiteral("\' />\r\n");

WriteLiteral("                        ");

            
            #line 645 "I:\Company\MensClothe\PaymentOrder.cshtml"
                   Write(Html.ValidationMessage("txtEmail"));

            
            #line default
            #line hidden
WriteLiteral("\r\n                    </li>\r\n                </ol>\r\n                <ol>\r\n       " +
"             <li>\r\n                        <label");

WriteLiteral(" for=\"txtPhone\"");

WriteLiteral(" \'");

            
            #line 650 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                                if (!ModelState.IsValidField("txtPhone"))
                                               {

            
            #line default
            #line hidden
WriteLiteral("                        ");

WriteLiteral("class=\"error-label\"");

            
            #line 652 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                                        }
            
            #line default
            #line hidden
WriteLiteral("\'>\r\n                            Phone:\r\n                        </label>\r\n       " +
"             </li>\r\n                    <li>\r\n                        <input");

WriteLiteral(" type=\"text\"");

WriteLiteral(" id=\"txtPhone\"");

WriteLiteral(" name=\"txtPhone\"");

WriteLiteral(" \'");

            
            #line 657 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                                                     Write(Validation.For("txtPhone"));

            
            #line default
            #line hidden
WriteLiteral("\' />\r\n");

WriteLiteral("                        ");

            
            #line 658 "I:\Company\MensClothe\PaymentOrder.cshtml"
                   Write(Html.ValidationMessage("txtPhone"));

            
            #line default
            #line hidden
WriteLiteral("\r\n                    </li>\r\n                </ol>\r\n                <ol>\r\n       " +
"             <li>\r\n                        <label");

WriteLiteral(" for=\"txtCC\"");

WriteLiteral(" \'");

            
            #line 663 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                             if (!ModelState.IsValidField("txtCC"))
                                            {

            
            #line default
            #line hidden
WriteLiteral("                        ");

WriteLiteral("class=\"error-label\"");

            
            #line 665 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                                        }
            
            #line default
            #line hidden
WriteLiteral("\'>\r\n                            Card Number:\r\n                        </label>\r\n " +
"                       <li />\r\n                    <li>\r\n                       " +
" <input");

WriteLiteral(" type=\"text\"");

WriteLiteral(" id=\"txtCC\"");

WriteLiteral(" \'");

            
            #line 670 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                                  Write(Validation.For("txtCC"));

            
            #line default
            #line hidden
WriteLiteral("\'  name=\"txtCC\"   />\r\n");

WriteLiteral("                        ");

            
            #line 671 "I:\Company\MensClothe\PaymentOrder.cshtml"
                   Write(Html.ValidationMessage("txtCC"));

            
            #line default
            #line hidden
WriteLiteral("\r\n                    </li>\r\n                </ol>\r\n                <ol>\r\n\r\n     " +
"               <li>\r\n                        <label>Expiration: </label>\r\n      " +
"                  <li />\r\n                    <li>\r\n                        <sel" +
"ect");

WriteLiteral(" id=\"txtCCMonth\"");

WriteLiteral(" name=\"txtCCMonth\"");

WriteLiteral(" enableviewstate=\"False\"");

WriteLiteral(">\r\n");

            
            #line 681 "I:\Company\MensClothe\PaymentOrder.cshtml"
                            
            
            #line default
            #line hidden
            
            #line 681 "I:\Company\MensClothe\PaymentOrder.cshtml"
                             for (int i = 1; i <= 12; i++)
                            {
                                int mnth = System.DateTime.Now.Month;
                                DateTime month = new DateTime(2013, i, 1);
                                if (i == mnth)
                                {   

            
            #line default
            #line hidden
WriteLiteral("                                <option");

WriteLiteral(" selected=\"selected\"");

WriteAttribute("value", Tuple.Create("  value=\"", 29647), Tuple.Create("\"", 29682)
            
            #line 687 "I:\Company\MensClothe\PaymentOrder.cshtml"
, Tuple.Create(Tuple.Create("", 29656), Tuple.Create<System.Object, System.Int32>(month.ToString("MMM (M)")
            
            #line default
            #line hidden
, 29656), false)
);

WriteLiteral(">");

            
            #line 687 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                                                                           Write(month.ToString("MM"));

            
            #line default
            #line hidden
WriteLiteral("</option> \r\n");

            
            #line 688 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                }
                                else
                                {

            
            #line default
            #line hidden
WriteLiteral("                                <option");

WriteAttribute("value", Tuple.Create("  value=\"", 29864), Tuple.Create("\"", 29899)
            
            #line 691 "I:\Company\MensClothe\PaymentOrder.cshtml"
, Tuple.Create(Tuple.Create("", 29873), Tuple.Create<System.Object, System.Int32>(month.ToString("MMM (M)")
            
            #line default
            #line hidden
, 29873), false)
);

WriteLiteral(">");

            
            #line 691 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                                                       Write(month.ToString("MM"));

            
            #line default
            #line hidden
WriteLiteral("</option> \r\n");

            
            #line 692 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                }
                            }

            
            #line default
            #line hidden
WriteLiteral("                        </select>\r\n                        <label>Year: </label>\r" +
"\n                        <select");

WriteLiteral(" id=\"txtCCYear\"");

WriteLiteral(" name=\"txtCCYear\"");

WriteLiteral(" enableviewstate=\"False\"");

WriteLiteral(">\r\n");

            
            #line 697 "I:\Company\MensClothe\PaymentOrder.cshtml"
                            
            
            #line default
            #line hidden
            
            #line 697 "I:\Company\MensClothe\PaymentOrder.cshtml"
                             for (int i = 0; i <= 11; i++)
                            {
                                String year = (DateTime.Today.Year + i).ToString();
                                if (i == 0)
                                { 

            
            #line default
            #line hidden
WriteLiteral("                                <option");

WriteLiteral(" selected=\"selected\"");

WriteAttribute("value", Tuple.Create(" value=\"", 30488), Tuple.Create("\"", 30501)
            
            #line 702 "I:\Company\MensClothe\PaymentOrder.cshtml"
, Tuple.Create(Tuple.Create("", 30496), Tuple.Create<System.Object, System.Int32>(year
            
            #line default
            #line hidden
, 30496), false)
);

WriteLiteral(">");

            
            #line 702 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                                                     Write(year);

            
            #line default
            #line hidden
WriteLiteral("</option> \r\n");

            
            #line 703 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                }
                                else
                                {

            
            #line default
            #line hidden
WriteLiteral("                                <option");

WriteAttribute("value", Tuple.Create("  value=\"", 30667), Tuple.Create("\"", 30681)
            
            #line 706 "I:\Company\MensClothe\PaymentOrder.cshtml"
, Tuple.Create(Tuple.Create("", 30676), Tuple.Create<System.Object, System.Int32>(year
            
            #line default
            #line hidden
, 30676), false)
);

WriteLiteral(">");

            
            #line 706 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                                  Write(year);

            
            #line default
            #line hidden
WriteLiteral("</option>\r\n");

            
            #line 707 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                }
                            }

            
            #line default
            #line hidden
WriteLiteral("                        </select>\r\n                    </li>\r\n\r\n                <" +
"/ol>\r\n                <ol>\r\n                    <li>\r\n                        <l" +
"abel");

WriteLiteral(" for=\"txtSecurity\"");

WriteLiteral(" \'");

            
            #line 715 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                                   if (!ModelState.IsValidField("txtSecurity"))
                                                  {

            
            #line default
            #line hidden
WriteLiteral("                        ");

WriteLiteral("class=\"error-label\"");

            
            #line 717 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                                        }
            
            #line default
            #line hidden
WriteLiteral("\'>\r\n                            Security Code:\r\n                        </label>\r" +
"\n                        <li />\r\n                    <li>\r\n                     " +
"   <input");

WriteLiteral(" type=\"text\"");

WriteLiteral(" id=\"txtSecurity\"");

WriteLiteral(" name=\"txtSecurity\"");

WriteLiteral("  \'");

            
            #line 722 "I:\Company\MensClothe\PaymentOrder.cshtml"
                                                                            Write(Validation.For("txtSecurity"));

            
            #line default
            #line hidden
WriteLiteral("\' />\r\n");

WriteLiteral("                        ");

            
            #line 723 "I:\Company\MensClothe\PaymentOrder.cshtml"
                   Write(Html.ValidationMessage("txtSecurity"));

            
            #line default
            #line hidden
WriteLiteral("\r\n                    </li>\r\n                </ol>\r\n              ");

WriteLiteral("\r\n            </div>\r\n            <input");

WriteLiteral(" type=\"submit\"");

WriteLiteral(" id=\"btnSubmit\"");

WriteLiteral(" value=\"Process\"");

WriteLiteral(@" />
        </fieldset>
    </form>
</section>
<section>
    <p>&nbsp;</p>
    <blockquote>
        <h3>Configuration:</h3>
        <hr>
        In order to configure this demo application you have to modify the 
  Configuration.cs file and fill in your PayPal and CC processor information. 
  The default demo is configured for Authorize.NET and PayPal with payments 
  directed at West Wind Technologies. Feel free to make a donation, preferably 
  large &lt;g&gt;. You can change the values in this file.
  <p>
      For more information on the classes and configuration requirements and URLs 
  for each please see the following documentation topics:
  </p>
        <p>
            <a
                href=""http://www.west-wind.com/westwindwebstore/docs/index.htm?page=_13U0XJX0K.htm"">Credit 
  Card Processing Classes</a><br>
            <a
                href=""http://www.west-wind.com/westwindwebstore/docs/index.htm?page=_13Z13TG18.htm"">Using 
  the Credit Card Processing Classes</a>
        </p>
        <p>&nbsp;</p>
    </blockquote>

</section>

");

        }
    }
}
